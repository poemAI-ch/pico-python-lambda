name: Build and Push Docker Image

on:
  push:
    branches:
      - main
    tags:
      - "*"

env:
  DOCKER_HUB_USERNAME: ${{ vars.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.12"]
        base_version: ["alpine-3.19", "ubuntu-22.04"]
        platform: ["linux/amd64", "linux/arm64"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ env.DOCKER_HUB_TOKEN }}" | docker login -u "${{ env.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create a new builder
        run: docker buildx create --use --name mybuilder

      - name: Build and push Docker image
        run: |
          # Calculate the base image type and version
          BASE_IMAGE_TYPE=$(echo "${{ matrix.base_version }}" | cut -d'-' -f1)
          BASE_IMAGE_VERSION=$(echo "${{ matrix.base_version }}" | cut -d'-' -f2)
          DOCKERFILE_DIR="${BASE_IMAGE_TYPE}"
          PROJECT_NAME="${GITHUB_REPOSITORY#*/}"
          COMMIT_HASH_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE_BASE_NAME="${DOCKER_HUB_USERNAME}/${PROJECT_NAME}"
          echo "IMAGE_BASE_NAME=${IMAGE_BASE_NAME}"
          OVERALL_TAG="${{ matrix.python_version }}-${{ matrix.base_version }}"
          MAIN_TAG="${IMAGE_BASE_NAME}:${OVERALL_TAG}"

          # Tag 'latest' only for Alpine builds
          if [[ "${{ matrix.base_version }}" == "alpine-"* ]]; then
            LATEST_TAG="${IMAGE_BASE_NAME}:latest"
            echo "Building and pushing tags: $MAIN_TAG and $LATEST_TAG"
            docker buildx build --push \
              --tag $MAIN_TAG --tag $LATEST_TAG --platform ${{ matrix.platform }} \
              --build-arg PYTHON_VERSION=${{ matrix.python_version }} \
              --build-arg BASE_IMAGE_VERSION=${BASE_IMAGE_VERSION} \
              -f ${DOCKERFILE_DIR}/Dockerfile \
              .
          else
            echo "Building and pushing tag: $MAIN_TAG"
            docker buildx build --push \
              --tag $MAIN_TAG --platform ${{ matrix.platform }} \
              --build-arg PYTHON_VERSION=${{ matrix.python_version }} \
              --build-arg BASE_IMAGE_VERSION=${BASE_IMAGE_VERSION} \
              -f ${DOCKERFILE_DIR}/Dockerfile \
              .
          fi

  # This second job combines the images into a multi-platform manifest
  create-manifest:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.12"]
        base_version: ["alpine-3.19", "ubuntu-22.04"]
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Create a new builder
        run: docker buildx create --use --name mybuilder

      - name: Create and push multi-platform manifest
        run: |
          BASE_IMAGE_TYPE=$(echo "${{ matrix.base_version }}" | cut -d'-' -f1)
          PROJECT_NAME="${GITHUB_REPOSITORY#*/}"
          IMAGE_BASE_NAME="${DOCKER_HUB_USERNAME}/${PROJECT_NAME}"
          OVERALL_TAG="${{ matrix.python_version }}-${{ matrix.base_version }}"
          MAIN_TAG="${IMAGE_BASE_NAME}:${OVERALL_TAG}"

          # Always combine the platforms into a manifest for each base image
          docker buildx imagetools create --tag $MAIN_TAG \
            ${IMAGE_BASE_NAME}:${OVERALL_TAG}-linux/amd64 \
            ${IMAGE_BASE_NAME}:${OVERALL_TAG}-linux/arm64

          # Only create the 'latest' tag for Alpine builds
          if [[ "${{ matrix.base_version }}" == "alpine-"* ]]; then
            LATEST_TAG="${IMAGE_BASE_NAME}:latest"
            docker buildx imagetools create --tag $LATEST_TAG \
              ${IMAGE_BASE_NAME}:${OVERALL_TAG}-linux/amd64 \
              ${IMAGE_BASE_NAME}:${OVERALL_TAG}-linux/arm64
          fi